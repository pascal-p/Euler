using Test

include("./digit_nth_power.jl")

# @time digit_nth_power()

@testset "#digit_nth_power()" begin
  @test digit_nth_power(2) == (0, 0)
  @test digit_nth_power(3) == (4, 1301)
  @test digit_nth_power(4) == (3, 19316)
  @test digit_nth_power(5) == (6, 443839)
end

#
#  2:
#  3: 153, 370, 371, 407
#  4: 1634, 8208, 9474
#  5: 4150, 4151, 54748, 92727, 93084, 194979
#  6: 548834
#  7: 1741725, 4210818, 9800817, 9926315, 14459929
#  8: 24678050, 24678051, 88593477
#  9: 146_511_208, 472_335_975, 534_494_836, 912_985_153
#
# 10: 4679307774
# 11: 32164049650, 40028394225, 42678290603, 44708635679, 49388550606, 32164049651, 82693916578, 94204591914
# 12:
# 13: 564240140138
# 14: 28116440335967
# 15:
# 16: 4338281769391370, 4338281769391371
# 17: 233411150132317, 21897142587612075, 35641594208964132, 35875699062250035
# 18
# 19: 1517841543307505039, 3289582984443187032, 4498128791164624869, 4929273885928088826
# 20: 63105425988599693916
#

# So lets determine the upper bound.
# We need to find a number x.9^5 which gives us an x digit number.
# We can do this by hand. Since 9^5 = 59049, we need at least 5 digits. +> smallest 5 digits
# 5 x 9^5  (99_999) = 295245, so with 5 digits we can make a 6 digit number.
# Thus 6*9^5 = 354_294 is a reasonable upper bound to use

#      9^9 = 387_420_489    => need at least
#  9 * 9^9 = 3_486_784_401  => 10 digits number
# 10 * 9^9 = 3_874_204_890 / does not work as an upper bound


# 2 :
# 3 :
#         153 == 1^3 + 5^3 + 3^3
#         370 == 3^3 + 7^3 + 0^3
#         371 == 3^3 + 7^3 + 1^3
#         407 == 4^3 + 0^3 + 7^3
# 4 :
#         1634 == 1^4 + 6^4 + 3^4 + 4^4
#         8208 == 8^4 + 2^4 + 0^4 + 8^4
#         9474 == 9^4 + 4^4 + 7^4 + 4^4
# 5 :
#         4150 == 4^5 + 1^5 + 5^5 + 0^5
#         4151 == 4^5 + 1^5 + 5^5 + 1^5
#         54748 == 5^5 + 4^5 + 7^5 + 4^5 + 8^5
#         92727 == 9^5 + 2^5 + 7^5 + 2^5 + 7^5
#         93084 == 9^5 + 3^5 + 0^5 + 8^5 + 4^5
# 6 :
#         548834 == 5^6 + 4^6 + 8^6 + 8^6 + 3^6 + 4^6
# 7:
#         range 100000:43046721
#         1741725 == 1^7 + 7^7 + 4^7 + 1^7 + 7^7 + 2^7 + 5^7
#         4210818 == 4^7 + 2^7 + 1^7 + 0^7 + 8^7 + 1^7 + 8^7
#         9800817 == 9^7 + 8^7 + 0^7 + 0^7 + 8^7 + 1^7 + 7^7
#         9926315 == 9^7 + 9^7 + 2^7 + 6^7 + 3^7 + 1^7 + 5^7
#         14459929 == 1^7 + 4^7 + 4^7 + 5^7 + 9^7 + 9^7 + 2^7 + 9^7
#
# 7: 1_741_725, 4_210_818, 9_800_817, 9_926_315,  14_459_929
#                       10^(n+1), when n = 7 =>  100_000_000
#                                      7 * 9^7 == 33_480_783

# last for 9 is 912_985_153
#     9^10 =  3_486_784_401
#    10^10 = 10_000_000_000

# 8 :
#         24678050 == 2^8 + 4^8 + 6^8 + 7^8 + 8^8 + 0^8 + 5^8 + 0^8
#         24678051 == 2^8 + 4^8 + 6^8 + 7^8 + 8^8 + 0^8 + 5^8 + 1^8
#         88593477 == 8^8 + 8^8 + 5^8 + 9^8 + 3^8 + 4^8 + 7^8 + 7^8
# 9 :
#         146511208 == 1^9 + 4^9 + 6^9 + 5^9 + 1^9 + 1^9 + 2^9 + 0^9 + 8^9
#         472335975 == 4^9 + 7^9 + 2^9 + 3^9 + 3^9 + 5^9 + 9^9 + 7^9 + 5^9
#         534494836 == 5^9 + 3^9 + 4^9 + 4^9 + 9^9 + 4^9 + 8^9 + 3^9 + 6^9
#         912985153 == 9^9 + 1^9 + 2^9 + 9^9 + 8^9 + 5^9 + 1^9 + 5^9 + 3^9
# 10:
#         range 100000000:31_381_059_609
#         4679307774 == 4^10 + 6^10 + 7^10 + 9^10 + 3^10 + 0^10 + 7^10 + 7^10 + 7^10 + 4^10
